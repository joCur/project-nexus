name: Infrastructure CI

on:
  push:
    branches: [main]
    paths:
      - 'backend/Dockerfile'
      - 'clients/web/Dockerfile'
      - 'docker-compose*.yml'
      - '.github/workflows/infrastructure-ci.yml'
  workflow_dispatch:
    inputs:
      force_rebuild:
        description: 'Force rebuild all images'
        required: false
        default: false
        type: boolean
      deploy_environment:
        description: 'Deploy to environment'
        required: false
        default: 'none'
        type: choice
        options:
          - 'none'
          - 'staging'
          - 'production'

permissions:
  contents: read
  packages: write
  actions: read

env:
  REGISTRY: ghcr.io
  DOCKER_BUILDKIT: 1

jobs:
  detect-docker-changes:
    name: Detect Docker Changes
    runs-on: ubuntu-latest
    outputs:
      backend: ${{ steps.changes.outputs.backend }}
      web: ${{ steps.changes.outputs.web }}
      docker-compose: ${{ steps.changes.outputs.docker-compose }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Detect changes
        uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            backend:
              - 'backend/**'
              - 'backend/Dockerfile'
              - 'database/**'
            web:
              - 'clients/web/**'
              - 'clients/web/Dockerfile'
            docker-compose:
              - 'docker-compose*.yml'

  build-backend:
    name: Build Backend Image
    runs-on: ubuntu-latest
    needs: [detect-docker-changes]
    if: |
      needs.detect-docker-changes.outputs.backend == 'true' ||
      github.event.inputs.force_rebuild == 'true'
    
    outputs:
      image: ${{ steps.meta.outputs.tags }}
      version: ${{ steps.version.outputs.version }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Generate version
        id: version
        run: |
          VERSION=$(date +%Y%m%d-%H%M%S)-$(echo ${{ github.sha }} | cut -c1-7)
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "date=$(date --iso-8601=seconds)" >> $GITHUB_OUTPUT
      
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository }}/backend
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value=${{ steps.version.outputs.version }}
      
      - name: Build and push backend image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILDTIME=${{ steps.version.outputs.date }}
            VERSION=${{ steps.version.outputs.version }}
          target: production

  build-web:
    name: Build Web Image
    runs-on: ubuntu-latest
    needs: [detect-docker-changes]
    if: |
      needs.detect-docker-changes.outputs.web == 'true' ||
      github.event.inputs.force_rebuild == 'true'
    
    outputs:
      image: ${{ steps.meta.outputs.tags }}
      version: ${{ steps.version.outputs.version }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Generate version
        id: version
        run: |
          VERSION=$(date +%Y%m%d-%H%M%S)-$(echo ${{ github.sha }} | cut -c1-7)
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "date=$(date --iso-8601=seconds)" >> $GITHUB_OUTPUT
      
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository }}/web
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value=${{ steps.version.outputs.version }}
      
      - name: Build and push web image
        uses: docker/build-push-action@v5
        with:
          context: ./clients/web
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILDTIME=${{ steps.version.outputs.date }}
            VERSION=${{ steps.version.outputs.version }}
          target: production

  generate-deployment-manifest:
    name: Generate Deployment Manifest
    runs-on: ubuntu-latest
    needs: [build-backend, build-web]
    if: always() && (needs.build-backend.result == 'success' || needs.build-web.result == 'success')
    
    steps:
      - name: Generate deployment manifest
        run: |
          # Get the latest version from either build job
          BACKEND_VERSION="${{ needs.build-backend.outputs.version }}"
          WEB_VERSION="${{ needs.build-web.outputs.version }}"
          VERSION=${BACKEND_VERSION:-$WEB_VERSION}
          
          cat > deployment-manifest.json << EOF
          {
            "version": "$VERSION",
            "commit": "${{ github.sha }}",
            "date": "$(date --iso-8601=seconds)",
            "images": {
              $(if [[ "${{ needs.build-backend.result }}" == "success" ]]; then
                echo "\"backend\": \"$(echo '${{ needs.build-backend.outputs.image }}' | head -1)\","
              fi)
              $(if [[ "${{ needs.build-web.result }}" == "success" ]]; then
                echo "\"web\": \"$(echo '${{ needs.build-web.outputs.image }}' | head -1)\","
              fi)
              "timestamp": "$(date +%s)"
            },
            "pull_commands": {
              $(if [[ "${{ needs.build-backend.result }}" == "success" ]]; then
                echo "\"backend\": \"docker pull $(echo '${{ needs.build-backend.outputs.image }}' | head -1)\","
              fi)
              $(if [[ "${{ needs.build-web.result }}" == "success" ]]; then
                echo "\"web\": \"docker pull $(echo '${{ needs.build-web.outputs.image }}' | head -1)\","
              fi)
              "generated": "$(date --iso-8601=seconds)"
            }
          }
          EOF
          
          # Clean up trailing commas
          sed -i 's/,\s*\([}\]])/\1/g' deployment-manifest.json
      
      - name: Upload deployment manifest
        uses: actions/upload-artifact@v4
        with:
          name: deployment-manifest-${{ needs.build-backend.outputs.version || needs.build-web.outputs.version }}
          path: deployment-manifest.json
          retention-days: 90

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build-backend, build-web, generate-deployment-manifest]
    if: |
      github.event.inputs.deploy_environment == 'staging' &&
      (needs.build-backend.result == 'success' || needs.build-web.result == 'success')
    environment: staging
    
    steps:
      - name: Placeholder for staging deployment
        run: |
          echo "🚀 Staging deployment would happen here"
          echo "Backend Image: ${{ needs.build-backend.outputs.image }}"
          echo "Web Image: ${{ needs.build-web.outputs.image }}"
          # Add actual deployment steps here (e.g., kubectl, docker-compose, etc.)

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-backend, build-web, generate-deployment-manifest]
    if: |
      github.event.inputs.deploy_environment == 'production' &&
      (needs.build-backend.result == 'success' || needs.build-web.result == 'success')
    environment: production
    
    steps:
      - name: Placeholder for production deployment
        run: |
          echo "🚀 Production deployment would happen here"
          echo "Backend Image: ${{ needs.build-backend.outputs.image }}"
          echo "Web Image: ${{ needs.build-web.outputs.image }}"
          # Add actual deployment steps here

  infrastructure-summary:
    name: Infrastructure Summary
    runs-on: ubuntu-latest
    needs: [detect-docker-changes, build-backend, build-web, generate-deployment-manifest]
    if: always()
    
    steps:
      - name: Download deployment manifest
        uses: actions/download-artifact@v4
        if: needs.generate-deployment-manifest.result == 'success'
        with:
          name: deployment-manifest-${{ needs.build-backend.outputs.version || needs.build-web.outputs.version }}
        continue-on-error: true
      
      - name: Generate infrastructure summary
        run: |
          echo "## 🏗️ Infrastructure Pipeline Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Backend Build**: ${{ needs.build-backend.result }}" >> $GITHUB_STEP_SUMMARY
          echo "**Web Build**: ${{ needs.build-web.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [[ -f deployment-manifest.json ]]; then
            VERSION=$(jq -r '.version' deployment-manifest.json)
            echo "**Version**: $VERSION" >> $GITHUB_STEP_SUMMARY
            
            if [[ "${{ needs.build-backend.result }}" == "success" ]]; then
              BACKEND_IMAGE=$(jq -r '.images.backend // "N/A"' deployment-manifest.json)
              echo "**Backend Image**: $BACKEND_IMAGE" >> $GITHUB_STEP_SUMMARY
            fi
            
            if [[ "${{ needs.build-web.result }}" == "success" ]]; then
              WEB_IMAGE=$(jq -r '.images.web // "N/A"' deployment-manifest.json)
              echo "**Web Image**: $WEB_IMAGE" >> $GITHUB_STEP_SUMMARY
            fi
            
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### 🐳 Docker Commands" >> $GITHUB_STEP_SUMMARY
            echo '```bash' >> $GITHUB_STEP_SUMMARY
            if [[ "${{ needs.build-backend.result }}" == "success" ]]; then
              jq -r '.pull_commands.backend' deployment-manifest.json >> $GITHUB_STEP_SUMMARY
            fi
            if [[ "${{ needs.build-web.result }}" == "success" ]]; then
              jq -r '.pull_commands.web' deployment-manifest.json >> $GITHUB_STEP_SUMMARY
            fi
            echo '```' >> $GITHUB_STEP_SUMMARY
          fi
          
          if [[ "${{ github.event.inputs.deploy_environment }}" != "none" ]]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "🚀 **Deployment Environment**: ${{ github.event.inputs.deploy_environment }}" >> $GITHUB_STEP_SUMMARY
          fi