name: Backend CI

on:
  pull_request:
    branches: [main]
    paths:
      - 'backend/**'
      - 'database/**'
      - 'redis/**'
      - '.github/workflows/backend-ci.yml'
  push:
    branches: [main]
    paths:
      - 'backend/**'
      - 'database/**'
      - 'redis/**'
      - '.github/workflows/backend-ci.yml'
  workflow_dispatch:
    inputs:
      run_tests:
        description: 'Run full test suite'
        required: false
        default: true
        type: boolean

permissions:
  contents: read
  actions: read
  packages: write

env:
  NODE_VERSION: '22'
  REGISTRY: ghcr.io

jobs:
  code-quality:
    name: Backend Code Quality
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json
      
      - name: Install dependencies
        working-directory: backend
        run: npm ci --silent
      
      - name: Run ESLint
        working-directory: backend
        run: npm run lint
        continue-on-error: true
      
      - name: TypeScript type check
        working-directory: backend
        run: npm run type-check
      
      - name: Check for unused dependencies
        working-directory: backend
        run: npx depcheck
        continue-on-error: true

  unit-tests:
    name: Backend Unit Tests
    runs-on: ubuntu-latest
    if: github.event.inputs.run_tests != 'false'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json
      
      - name: Install dependencies
        working-directory: backend
        run: npm ci --silent
      
      - name: Run unit tests
        working-directory: backend
        env:
          NODE_ENV: test
          AUTH0_DOMAIN: test.auth0.com
          AUTH0_CLIENT_ID: test_client_id
          AUTH0_CLIENT_SECRET: test_client_secret_for_testing_purposes
          JWT_SECRET: test_jwt_secret_for_unit_tests_minimum_32_chars_required_by_validation
          SESSION_SECRET: test_session_secret_for_testing_minimum_32_chars_required_validation
        run: npm test -- --testPathPatterns="unit|security" --coverage
      
      - name: Upload test coverage
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: backend-coverage-${{ github.run_number }}
          path: backend/coverage/
          retention-days: 7

  integration-tests:
    name: Backend Integration Tests
    runs-on: ubuntu-latest
    if: github.event.inputs.run_tests != 'false'
    
    services:
      postgres:
        image: pgvector/pgvector:pg15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: nexus_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json
      
      - name: Install dependencies
        working-directory: backend
        run: npm ci --silent
      
      - name: Run database migrations
        working-directory: backend
        env:
          NODE_ENV: test
          POSTGRES_DB: nexus_test
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: test_password
          POSTGRES_PORT: 5432
        run: npm run migrate
      
      - name: Run integration tests
        working-directory: backend
        env:
          NODE_ENV: test
          POSTGRES_DB: nexus_test
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: test_password
          DATABASE_URL: postgresql://postgres:test_password@localhost:5432/nexus_test
          REDIS_URL: redis://localhost:6379
          AUTH0_DOMAIN: test.auth0.com
          AUTH0_CLIENT_ID: test_client_id
          AUTH0_CLIENT_SECRET: test_client_secret_for_testing_purposes
          JWT_SECRET: test_jwt_secret_for_unit_tests_minimum_32_chars_required_by_validation
          SESSION_SECRET: test_session_secret_for_testing_minimum_32_chars_required_validation
        run: npm test -- --testPathPatterns="integration|migration"

  build-docker-image:
    name: Build Backend Docker Image
    runs-on: ubuntu-latest
    needs: [code-quality, unit-tests, integration-tests]
    if: github.ref == 'refs/heads/main'
    outputs:
      image: ${{ steps.meta.outputs.tags }}
      version: ${{ steps.version.outputs.version }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Log in to GitHub Container Registry
        if: github.ref == 'refs/heads/main'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Generate version
        id: version
        run: |
          VERSION=$(date +%Y%m%d-%H%M%S)-$(echo ${{ github.sha }} | cut -c1-7)
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "date=$(date --iso-8601=seconds)" >> $GITHUB_OUTPUT
      
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository }}/backend
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value=${{ steps.version.outputs.version }}
      
      - name: Build and push backend image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          platforms: linux/amd64,linux/arm64
          push: ${{ github.ref == 'refs/heads/main' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILDTIME=${{ steps.version.outputs.date }}
            VERSION=${{ steps.version.outputs.version }}

  backend-summary:
    name: Backend Summary
    runs-on: ubuntu-latest
    needs: [code-quality, unit-tests, integration-tests, build-docker-image]
    if: always()
    
    steps:
      - name: Generate summary
        run: |
          echo "## 🔧 Backend Pipeline Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Code Quality**: ${{ needs.code-quality.result }}" >> $GITHUB_STEP_SUMMARY
          echo "**Unit Tests**: ${{ needs.unit-tests.result }}" >> $GITHUB_STEP_SUMMARY
          echo "**Integration Tests**: ${{ needs.integration-tests.result }}" >> $GITHUB_STEP_SUMMARY
          
          # Handle Docker build status
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "**Docker Build**: ${{ needs.build-docker-image.result }}" >> $GITHUB_STEP_SUMMARY
            if [[ "${{ needs.build-docker-image.outputs.image }}" != "" ]]; then
              echo "**Docker Image**: ${{ needs.build-docker-image.outputs.image }}" >> $GITHUB_STEP_SUMMARY
              echo "**Status**: ✅ Image pushed to registry" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "**Docker Build**: ⏭️ Skipped (PR build - Docker only builds on main)" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Determine overall success (Docker build success only required on main branch)
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            if [[ "${{ needs.code-quality.result }}" == "success" && "${{ needs.unit-tests.result }}" == "success" && "${{ needs.integration-tests.result }}" == "success" && "${{ needs.build-docker-image.result }}" == "success" ]]; then
              echo "✅ **Backend pipeline passed successfully!**" >> $GITHUB_STEP_SUMMARY
            else
              echo "❌ **Backend pipeline failed. Check individual jobs for details.**" >> $GITHUB_STEP_SUMMARY
            fi
          else
            if [[ "${{ needs.code-quality.result }}" == "success" && "${{ needs.unit-tests.result }}" == "success" && "${{ needs.integration-tests.result }}" == "success" ]]; then
              echo "✅ **Backend pipeline passed successfully!**" >> $GITHUB_STEP_SUMMARY
            else
              echo "❌ **Backend pipeline failed. Check individual jobs for details.**" >> $GITHUB_STEP_SUMMARY
            fi
          fi