name: CI Pipeline

on:
  pull_request:
    branches: [main]
    types: [opened, synchronize, reopened]
  push:
    branches: [main]
  workflow_dispatch:  # Allow manual trigger

permissions:
  contents: read
  security-events: write
  actions: read
  packages: write

env:
  NODE_VERSION: '22'
  DOCKER_BUILDKIT: 1
  REGISTRY: ghcr.io

jobs:
  # Code quality and type checking
  code-quality:
    name: Code Quality Check - ${{ matrix.app }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        app: [backend, web]
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: |
            ${{ matrix.app == 'web' && 'clients/web/package-lock.json' || 'backend/package-lock.json' }}
      
      - name: Install dependencies
        working-directory: ${{ matrix.app == 'web' && 'clients/web' || 'backend' }}
        run: npm ci
      
      - name: Run ESLint
        working-directory: ${{ matrix.app == 'web' && 'clients/web' || 'backend' }}
        run: npm run lint || true
        continue-on-error: true
      
      - name: TypeScript type check
        working-directory: ${{ matrix.app == 'web' && 'clients/web' || 'backend' }}
        run: npm run type-check || npx tsc --noEmit
      
      - name: Check for unused dependencies
        working-directory: ${{ matrix.app == 'web' && 'clients/web' || 'backend' }}
        run: npx depcheck || true
        continue-on-error: true

  # Security scanning
  security:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
      
      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        continue-on-error: true
        if: github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name == github.repository
        with:
          sarif_file: 'trivy-results.sarif'
      
      - name: Check for secrets (Pull Request)
        if: github.event_name == 'pull_request'
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event.pull_request.base.sha }}
          head: ${{ github.event.pull_request.head.sha }}
          
      - name: Check for secrets (Push)
        if: github.event_name == 'push' && github.event.before != '0000000000000000000000000000000000000000'
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event.before }}
          head: ${{ github.event.after }}
          extra_args: --debug --only-verified
          
      - name: Check for secrets (Full Scan)
        if: (github.event_name == 'push' && github.event.before == '0000000000000000000000000000000000000000') || github.event_name == 'workflow_dispatch'
        uses: trufflesecurity/trufflehog@main
        continue-on-error: true
        with:
          path: ./
          extra_args: --debug --only-verified

  # Test suite
  test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: pgvector/pgvector:pg15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: nexus_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'backend/package-lock.json'
      
      - name: Install backend dependencies
        working-directory: backend
        run: npm ci
      
      - name: Run database migrations
        working-directory: backend
        env:
          DATABASE_URL: postgresql://postgres:test_password@localhost:5432/nexus_test
        run: npm run db:migrate || echo "No migrations found"
      
      - name: Run backend tests
        working-directory: backend
        env:
          NODE_ENV: test
          POSTGRES_DB: nexus_test
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: test_password
          DATABASE_URL: postgresql://postgres:test_password@localhost:5432/nexus_test
          REDIS_URL: redis://localhost:6379
          AUTH0_DOMAIN: test.auth0.com
          AUTH0_CLIENT_ID: test_client_id
          AUTH0_CLIENT_SECRET: test_client_secret_for_testing_purposes
          JWT_SECRET: test_jwt_secret_for_unit_tests_minimum_32_chars_required_by_validation
          SESSION_SECRET: test_session_secret_for_testing_minimum_32_chars_required_validation
        run: npm test
      
      - name: Install frontend dependencies
        working-directory: clients/web
        run: npm ci
      
      - name: Run frontend tests
        working-directory: clients/web
        env:
          NEXT_PUBLIC_AUTH0_DOMAIN: test.auth0.com
          NEXT_PUBLIC_AUTH0_CLIENT_ID: test_client_id
        run: npm test || echo "No tests configured"

  # Mobile app build and test
  mobile:
    name: Mobile App Build & Test
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Java JDK
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: 'gradle'
      
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'
          cache: true
      
      - name: Verify Flutter installation
        run: |
          flutter --version
          flutter doctor -v
      
      - name: Cache Flutter pub dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.pub-cache
            clients/app/.dart_tool
            clients/app/build
          key: flutter-pub-${{ hashFiles('clients/app/pubspec.lock') }}
          restore-keys: |
            flutter-pub-
      
      - name: Install Flutter dependencies
        working-directory: clients/app
        run: flutter pub get
      
      - name: Verify dependencies installation
        working-directory: clients/app
        run: flutter pub deps
      
      - name: Generate code (if needed)
        working-directory: clients/app
        run: |
          if grep -q "build_runner" pubspec.yaml; then
            flutter packages pub run build_runner build --delete-conflicting-outputs
          else
            echo "No build_runner found, skipping code generation"
          fi
      
      - name: Run Flutter analyze
        working-directory: clients/app
        run: flutter analyze . --fatal-warnings
      
      - name: Run Flutter tests
        working-directory: clients/app
        run: |
          flutter test --coverage --reporter=expanded
          if [ -d "test" ] && [ "$(find test -name '*.dart' | wc -l)" -gt 0 ]; then
            echo "✅ Tests executed successfully"
          else
            echo "⚠️ No test files found, but this is acceptable for early development"
          fi
      
      - name: Upload test coverage
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: flutter-coverage-${{ github.run_number }}
          path: clients/app/coverage/lcov.info
          retention-days: 5
      
      - name: Build Android APK (Debug)
        working-directory: clients/app
        run: |
          flutter build apk --debug --build-name=1.0.0 --build-number=${{ github.run_number }}
          ls -la build/app/outputs/flutter-apk/
      
      - name: Build Android APK (Release)
        working-directory: clients/app
        run: |
          flutter build apk --release --build-name=1.0.0 --build-number=${{ github.run_number }}
          ls -la build/app/outputs/flutter-apk/
      
      - name: Upload Debug APK Artifact
        uses: actions/upload-artifact@v4
        with:
          name: nexus-mobile-debug-${{ github.run_number }}
          path: clients/app/build/app/outputs/flutter-apk/app-debug.apk
          retention-days: 30
      
      - name: Upload Release APK Artifact
        uses: actions/upload-artifact@v4
        with:
          name: nexus-mobile-release-${{ github.run_number }}
          path: clients/app/build/app/outputs/flutter-apk/app-release.apk
          retention-days: 90
      
      - name: Generate mobile build summary
        run: |
          echo "## 📱 Mobile Build Complete!" >> mobile_summary.md
          echo "" >> mobile_summary.md
          echo "**Build Number:** ${{ github.run_number }}" >> mobile_summary.md
          echo "**Flutter Version:** $(flutter --version | head -1)" >> mobile_summary.md
          echo "**Build Date:** $(date --iso-8601=seconds)" >> mobile_summary.md
          echo "" >> mobile_summary.md
          echo "### APK Files Generated:" >> mobile_summary.md
          echo "- **Debug APK:** \`nexus-mobile-debug-${{ github.run_number }}.zip\`" >> mobile_summary.md
          echo "- **Release APK:** \`nexus-mobile-release-${{ github.run_number }}.zip\`" >> mobile_summary.md
          echo "" >> mobile_summary.md
          echo "### APK Information:" >> mobile_summary.md
          if [ -f "clients/app/build/app/outputs/flutter-apk/app-debug.apk" ]; then
            DEBUG_SIZE=$(stat -c%s "clients/app/build/app/outputs/flutter-apk/app-debug.apk" | numfmt --to=iec)
            echo "- **Debug APK Size:** $DEBUG_SIZE" >> mobile_summary.md
          fi
          if [ -f "clients/app/build/app/outputs/flutter-apk/app-release.apk" ]; then
            RELEASE_SIZE=$(stat -c%s "clients/app/build/app/outputs/flutter-apk/app-release.apk" | numfmt --to=iec)
            echo "- **Release APK Size:** $RELEASE_SIZE" >> mobile_summary.md
          fi
      
      - name: Upload mobile build summary
        uses: actions/upload-artifact@v4
        with:
          name: mobile-build-summary-${{ github.run_number }}
          path: mobile_summary.md
          retention-days: 30

  # Build Docker images
  build:
    name: Build & Push Docker Images
    runs-on: ubuntu-latest
    needs: [code-quality, security, test, mobile]
    # Build on main branch push or manual trigger
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    
    outputs:
      backend-image: ${{ steps.meta-backend.outputs.tags }}
      frontend-image: ${{ steps.meta-frontend.outputs.tags }}
      version: ${{ steps.meta.outputs.version }}
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Generate version and metadata
        id: meta
        run: |
          VERSION=$(date +%Y%m%d-%H%M%S)-$(echo ${{ github.sha }} | cut -c1-7)
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "date=$(date --iso-8601=seconds)" >> $GITHUB_OUTPUT
      
      - name: Extract backend metadata
        id: meta-backend
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository }}/backend
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value=${{ steps.meta.outputs.version }}
      
      - name: Extract frontend metadata
        id: meta-frontend
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository }}/web
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value=${{ steps.meta.outputs.version }}
      
      - name: Build and push backend image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          platforms: linux/amd64
          push: true
          tags: ${{ steps.meta-backend.outputs.tags }}
          labels: ${{ steps.meta-backend.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILDTIME=${{ steps.meta.outputs.date }}
            VERSION=${{ steps.meta.outputs.version }}
      
      - name: Build and push frontend image
        uses: docker/build-push-action@v5
        with:
          context: ./clients/web
          platforms: linux/amd64
          push: true
          tags: ${{ steps.meta-frontend.outputs.tags }}
          labels: ${{ steps.meta-frontend.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILDTIME=${{ steps.meta.outputs.date }}
            VERSION=${{ steps.meta.outputs.version }}
      
      - name: Generate deployment manifest
        run: |
          cat > deployment-manifest.json << EOF
          {
            "version": "${{ steps.meta.outputs.version }}",
            "commit": "${{ github.sha }}",
            "date": "${{ steps.meta.outputs.date }}",
            "images": {
              "backend": "$(echo '${{ steps.meta-backend.outputs.tags }}' | head -1)",
              "frontend": "$(echo '${{ steps.meta-frontend.outputs.tags }}' | head -1)"
            },
            "pull_commands": {
              "backend": "docker pull $(echo '${{ steps.meta-backend.outputs.tags }}' | head -1)",
              "frontend": "docker pull $(echo '${{ steps.meta-frontend.outputs.tags }}' | head -1)"
            }
          }
          EOF
      
      - name: Upload deployment manifest
        uses: actions/upload-artifact@v4
        with:
          name: deployment-manifest-${{ steps.meta.outputs.version }}
          path: deployment-manifest.json
          retention-days: 30
  
  # Summary report
  build-summary:
    name: Build Summary
    runs-on: ubuntu-latest
    needs: [build]
    if: always() && needs.build.result == 'success'
    
    steps:
      - name: Download deployment manifest
        uses: actions/download-artifact@v4
        with:
          name: deployment-manifest-${{ needs.build.outputs.version }}
      
      - name: Download mobile build summary
        uses: actions/download-artifact@v4
        continue-on-error: true
        with:
          name: mobile-build-summary-${{ github.run_number }}
      
      - name: Display build summary
        run: |
          echo "## 🚀 Build Complete!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Version:** ${{ needs.build.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "**Backend Image:** ${{ needs.build.outputs.backend-image }}" >> $GITHUB_STEP_SUMMARY
          echo "**Frontend Image:** ${{ needs.build.outputs.frontend-image }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Add mobile build info if available
          if [ -f "mobile_summary.md" ]; then
            echo "### 📱 Mobile Build Information" >> $GITHUB_STEP_SUMMARY
            cat mobile_summary.md | tail -n +2 >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "### Manual Deployment Commands" >> $GITHUB_STEP_SUMMARY
          echo '```bash' >> $GITHUB_STEP_SUMMARY
          echo "# Pull latest images" >> $GITHUB_STEP_SUMMARY
          cat deployment-manifest.json | jq -r '.pull_commands.backend'>> $GITHUB_STEP_SUMMARY
          cat deployment-manifest.json | jq -r '.pull_commands.frontend' >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "# Update your docker-compose.yml with these images:" >> $GITHUB_STEP_SUMMARY
          echo "# backend: $(cat deployment-manifest.json | jq -r '.images.backend')" >> $GITHUB_STEP_SUMMARY
          echo "# frontend: $(cat deployment-manifest.json | jq -r '.images.frontend')" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          
          # Add mobile artifact download info
          if [ -f "mobile_summary.md" ]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### 📲 Mobile App Downloads" >> $GITHUB_STEP_SUMMARY
            echo "Mobile APK files are available in the workflow artifacts:" >> $GITHUB_STEP_SUMMARY
            echo "- **Debug APK**: \`nexus-mobile-debug-${{ github.run_number }}\`" >> $GITHUB_STEP_SUMMARY
            echo "- **Release APK**: \`nexus-mobile-release-${{ github.run_number }}\`" >> $GITHUB_STEP_SUMMARY
            echo "- **Test Coverage**: \`flutter-coverage-${{ github.run_number }}\`" >> $GITHUB_STEP_SUMMARY
          fi