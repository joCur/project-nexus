# Project Nexus - Docker Compose Configuration
# Supports both development and production environments
# Services: Backend API, PostgreSQL with pgvector, Redis Cache

version: '3.8'

services:
  #######################
  # Backend API Service
  #######################
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: ${DOCKER_TARGET:-production}
    container_name: nexus-backend
    restart: unless-stopped
    ports:
      - "${BACKEND_PORT:-3000}:3000"
    environment:
      # Node.js Configuration
      - NODE_ENV=${NODE_ENV:-production}
      - PORT=3000
      
      # Database Configuration
      - DATABASE_URL=postgresql://${POSTGRES_USER:-nexus}:${POSTGRES_PASSWORD:-nexus_secure_2024}@postgres:5432/${POSTGRES_DB:-nexus_db}
      - DB_POOL_MIN=${DB_POOL_MIN:-2}
      - DB_POOL_MAX=${DB_POOL_MAX:-10}
      - DB_TIMEOUT=${DB_TIMEOUT:-30000}
      
      # Redis Configuration
      - REDIS_URL=redis://redis:6379
      - REDIS_PASSWORD=${REDIS_PASSWORD:-}
      - REDIS_DB=${REDIS_DB:-0}
      
      # Auth0 Configuration
      - AUTH0_DOMAIN=${AUTH0_DOMAIN}
      - AUTH0_CLIENT_ID=${AUTH0_CLIENT_ID}
      - AUTH0_CLIENT_SECRET=${AUTH0_CLIENT_SECRET}
      - AUTH0_AUDIENCE=${AUTH0_AUDIENCE:-https://api.nexus.app}
      - AUTH0_MANAGEMENT_CLIENT_ID=${AUTH0_MANAGEMENT_CLIENT_ID}
      - AUTH0_MANAGEMENT_CLIENT_SECRET=${AUTH0_MANAGEMENT_CLIENT_SECRET}
      
      # JWT Configuration
      - JWT_SECRET=${JWT_SECRET:-your-super-secret-jwt-key-change-in-production}
      - JWT_EXPIRES_IN=${JWT_EXPIRES_IN:-24h}
      
      # API Configuration
      - API_VERSION=${API_VERSION:-v1}
      - CORS_ORIGIN=${CORS_ORIGIN:-http://localhost:3001,http://localhost:3000}
      - RATE_LIMIT_WINDOW=${RATE_LIMIT_WINDOW:-15}
      - RATE_LIMIT_MAX=${RATE_LIMIT_MAX:-100}
      
      # OpenAI Configuration (for embeddings)
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - OPENAI_MODEL=${OPENAI_MODEL:-text-embedding-ada-002}
      
      # Logging Configuration
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - LOG_FORMAT=${LOG_FORMAT:-json}
      
      # Security Configuration
      - BCRYPT_ROUNDS=${BCRYPT_ROUNDS:-12}
      - SESSION_SECRET=${SESSION_SECRET:-your-session-secret-change-in-production}
      
    volumes:
      # Development hot-reload (only in development)
      - ./backend/src:/app/src:ro
      - ./backend/package.json:/app/package.json:ro
      - ./backend/tsconfig.json:/app/tsconfig.json:ro
      # Logs persistence
      - nexus_logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - nexus-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  #######################
  # PostgreSQL Database with pgvector
  #######################
  postgres:
    image: pgvector/pgvector:pg15
    container_name: nexus-postgres
    restart: unless-stopped
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-nexus_db}
      - POSTGRES_USER=${POSTGRES_USER:-nexus}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-nexus_secure_2024}
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256
      - POSTGRES_HOST_AUTH_METHOD=scram-sha-256
      
      # Performance tuning
      - POSTGRES_SHARED_PRELOAD_LIBRARIES=pg_stat_statements,auto_explain
      - POSTGRES_MAX_CONNECTIONS=${POSTGRES_MAX_CONNECTIONS:-100}
      - POSTGRES_SHARED_BUFFERS=${POSTGRES_SHARED_BUFFERS:-128MB}
      - POSTGRES_EFFECTIVE_CACHE_SIZE=${POSTGRES_EFFECTIVE_CACHE_SIZE:-4GB}
      - POSTGRES_WORK_MEM=${POSTGRES_WORK_MEM:-4MB}
      - POSTGRES_MAINTENANCE_WORK_MEM=${POSTGRES_MAINTENANCE_WORK_MEM:-64MB}
    volumes:
      # Data persistence
      - nexus_postgres_data:/var/lib/postgresql/data
      # Custom initialization scripts
      - ./database/init:/docker-entrypoint-initdb.d:ro
      # Configuration
      - ./database/postgresql.conf:/etc/postgresql/postgresql.conf:ro
    networks:
      - nexus-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-nexus} -d ${POSTGRES_DB:-nexus_db}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    command: >
      postgres 
      -c log_statement=all
      -c log_destination=stderr
      -c log_line_prefix='%t [%p]: [%l-1] user=%u,db=%d,app=%a,client=%h '
      -c shared_preload_libraries=pg_stat_statements,auto_explain
      -c pg_stat_statements.track=all
      -c auto_explain.log_min_duration=1000ms
      -c auto_explain.log_analyze=true

  #######################
  # Redis Cache
  #######################
  redis:
    image: redis:7-alpine
    container_name: nexus-redis
    restart: unless-stopped
    ports:
      - "${REDIS_PORT:-6379}:6379"
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD:-}
    volumes:
      # Data persistence
      - nexus_redis_data:/data
      # Configuration
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
    networks:
      - nexus-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 30s
    command: >
      redis-server 
      --appendonly yes 
      --appendfsync everysec 
      --maxmemory 256mb 
      --maxmemory-policy allkeys-lru
      --tcp-keepalive 60
      --timeout 300
      --databases 16
      ${REDIS_PASSWORD:+--requirepass $REDIS_PASSWORD}

  #######################
  # Database Admin (Development only)
  #######################
  adminer:
    image: adminer:4-standalone
    container_name: nexus-adminer
    restart: unless-stopped
    ports:
      - "${ADMINER_PORT:-8080}:8080"
    environment:
      - ADMINER_DEFAULT_SERVER=postgres
      - ADMINER_DESIGN=hydra
    networks:
      - nexus-network
    profiles:
      - development
      - admin
    depends_on:
      - postgres

  #######################
  # Redis Commander (Development only)
  #######################
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: nexus-redis-commander
    restart: unless-stopped
    ports:
      - "${REDIS_COMMANDER_PORT:-8081}:8081"
    environment:
      - REDIS_HOSTS=local:redis:6379
      - HTTP_USER=${REDIS_COMMANDER_USER:-admin}
      - HTTP_PASSWORD=${REDIS_COMMANDER_PASSWORD:-admin123}
    networks:
      - nexus-network
    profiles:
      - development
      - admin
    depends_on:
      - redis

#######################
# Networks
#######################
networks:
  nexus-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

#######################
# Volumes
#######################
volumes:
  nexus_postgres_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_DIR:-./data}/postgres
  
  nexus_redis_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_DIR:-./data}/redis
  
  nexus_logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_DIR:-./data}/logs