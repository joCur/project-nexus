# Project Nexus - Production Docker Compose Configuration
# Standalone production configuration with all services

version: '3.8'

services:
  # Backend API Service
  backend:
    image: ghcr.io/${GITHUB_REPOSITORY}/backend:latest
    container_name: nexus-backend
    restart: always
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://${DB_USER}:${DB_PASSWORD}@postgres:5432/${DB_NAME}
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379
      AUTH0_DOMAIN: ${AUTH0_DOMAIN}
      AUTH0_CLIENT_ID: ${AUTH0_CLIENT_ID}
      AUTH0_CLIENT_SECRET: ${AUTH0_CLIENT_SECRET}
      AUTH0_AUDIENCE: ${AUTH0_AUDIENCE}
      JWT_SECRET: ${JWT_SECRET}
      PORT: 4000
      LOG_LEVEL: warn
    ports:
      - "4000:4000"
    volumes:
      - nexus_logs:/app/logs
    command: ["node", "dist/index.js"]
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - nexus-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
  
  # Frontend Web Application
  web:
    image: ghcr.io/${GITHUB_REPOSITORY}/web:latest
    container_name: nexus-web
    restart: always
    environment:
      NODE_ENV: production
      NEXT_PUBLIC_API_URL: ${PUBLIC_API_URL:-http://localhost:4000}
      NEXT_PUBLIC_AUTH0_DOMAIN: ${AUTH0_DOMAIN}
      NEXT_PUBLIC_AUTH0_CLIENT_ID: ${AUTH0_CLIENT_ID}
      NEXT_PUBLIC_AUTH0_REDIRECT_URI: ${AUTH0_REDIRECT_URI}
      AUTH0_SECRET: ${AUTH0_SECRET}
      AUTH0_BASE_URL: ${AUTH0_BASE_URL}
    ports:
      - "3000:3000"
    depends_on:
      - backend
    networks:
      - nexus-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    
  # PostgreSQL Database with pgvector
  postgres:
    image: pgvector/pgvector:pg15
    container_name: nexus-postgres
    restart: always
    environment:
      POSTGRES_USER: ${DB_USER:-nexus}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME:-nexus_production}
      POSTGRES_HOST_AUTH_METHOD: scram-sha-256
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
      # Production-specific settings
      POSTGRES_SHARED_PRELOAD_LIBRARIES: pg_stat_statements,auto_explain
      POSTGRES_MAX_CONNECTIONS: 200
      POSTGRES_SHARED_BUFFERS: 256MB
      POSTGRES_EFFECTIVE_CACHE_SIZE: 2GB
      POSTGRES_WORK_MEM: 8MB
      POSTGRES_MAINTENANCE_WORK_MEM: 128MB
    volumes:
      - nexus_postgres_data:/var/lib/postgresql/data
      - ./scripts/backup:/backup
    networks:
      - nexus-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-nexus}"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '1.0'
          memory: 1G
    command: >
      postgres 
      -c log_statement=ddl
      -c log_min_duration_statement=5000
      -c shared_preload_libraries=pg_stat_statements,auto_explain
      -c pg_stat_statements.track=top
      -c auto_explain.log_min_duration=5000ms
      -c auto_explain.log_analyze=true
      -c checkpoint_completion_target=0.9
      -c wal_buffers=32MB
      -c max_wal_size=2GB
      -c min_wal_size=160MB
    
  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: nexus-redis
    restart: always
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD}
    volumes:
      - nexus_redis_data:/data
    networks:
      - nexus-network
    healthcheck:
      test: ["CMD", "redis-cli", "--auth", "${REDIS_PASSWORD}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
    command: >
      redis-server 
      --appendonly yes 
      --appendfsync everysec 
      --maxmemory 512mb 
      --maxmemory-policy allkeys-lru
      --tcp-keepalive 60
      --timeout 300
      --databases 16
      --requirepass ${REDIS_PASSWORD}
      --save 900 1
      --save 300 10
      --save 60 10000

networks:
  nexus-network:
    driver: bridge

volumes:
  nexus_postgres_data:
    driver: local
  nexus_redis_data:
    driver: local
  nexus_logs:
    driver: local